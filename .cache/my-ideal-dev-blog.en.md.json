{"metadataHash":"1484afe32dfb6e003e1b200f96987625a145c0f69c46005c602ac70cb23845ca","contentHash":"690edbac4a875e01c7f66b7a5b21558c9066b63c7a0f8820471f0759edcd8159","metadata":{"created":"2025-07-20T00:00","updated":"2025-07-25T08:12","published":true,"slug":"my-ideal-dev-blog","title":"Creating My Own Blog","subTitle":"What Are the Conditions of an Ideal Blog?","description":"A journey to build a truly 'mine' space beyond platform dependency. Achieve free hosting and complete customization with GitHub Pages and SvelteKit, while writing freely anytime, anywhere with Obsidian.","series":"똑똑한 블로그 만들기","categories":["Thoughts"],"tags":["github-pages","markdown","svelte-kit"],"lang":"en","thumbnail":"https://ironpark.github.io/posts/my-ideal-dev-blog/title.png","originalLang":"ko"},"content":"![[title.png]]\n## Dreaming of My Own Space\n\nI often had the vague thought, \"It would be nice to have my own blog.\" The idea of recording what I’ve done, sharing it, interacting, and setting up a small workshop of my own in some corner of the vast internet. I also hoped that through this, I might grow little by little.\n\nSince just thinking about it felt like a waste, I tried a few times. I wrote in notepads or used platforms, but none lasted long. I didn’t like the features, quickly lost interest, or simply got lazy and let it fade away. This time, I decided to try something a bit different. Really create a blog that I can be satisfied with. A space I can organize myself, maintain for a long time, and manage however I want.\n\n## What Is an Ideal Blog?\nEveryone’s ideal blog will look different. But looking back on various trials and errors, the minimum conditions for a blog that suits me boiled down to these four:\n\n### 1. Minimize Costs\nWriting alone is already mentally taxing. Can I really afford to worry about money to run a blog? Running a server myself or paying fees is out of the question. Free is best. Preferably free forever.\n\n### 2. Ownership of Data and Control\nHow many services have suddenly shut down? Korea’s Cyworld and Egloos are examples. No matter how many users a service has now or how well it’s managed, **no one knows if it will still be around in 10 or 20 years.**\n\nEven if we generously assume the service will last 100 years, I don’t want my content to be restricted or features I use to be reduced or changed due to terms of service updates or business decisions.\n\n### 3. Customization\nI want to be able to control the blog’s design and functionality as I please. Whether it’s adding ads, supporting multiple languages, or tweaking features, it should be easy. **Do whatever I want, however I feel like it.**\n\n### 4. Writing Should Be Easy\nWriting is always hard. But at least **it should be easy to get started.** I want to be able to write or delete whenever and wherever inspiration strikes, whether on a smartphone, tablet, or desktop—**the environment shouldn’t limit me.**\n\n## The Ultimate Solution\n![[silver-bullet.png]]\n\nThere aren’t many ways to satisfy all these conditions. What I chose was the combination of GitHub Pages + SvelteKit.\n\n### GitHub Pages\nGitHub lets you create a repository named after your account and host a static site **for free**. The deployed site can be accessed at `username.github.io`. As you can see from the URL, this blog was created that way. You can check out the source code on the [GitHub repository](https://github.com/ironpark/ironpark.github.io/).\n\nOf course, GitHub is also a corporate service and could face unexpected outages or permanent shutdowns. But fortunately, you don’t have to **bow to Microsoft data centers or offer sacrifices to the GitHub gods at dawn** to prevent this. That’s because Git itself is a distributed version control system. Even if GitHub disappears, all your content remains intact in your local repository.\n\nIf you want to be even more certain, you can run a self-hosted Git server using open source like [Gitea](https://github.com/go-gitea/gitea), which is lightweight enough to run on a Raspberry Pi. ~~Honestly, if you get to this stage, you’re practically a tech self-sufficient farmer.~~\n\nThis structure goes beyond just running a blog; it forms an important foundation for **taking control of your own data and tools.**\n\n#### Why Not Use Hugo or Jekyll?\n\nIf I just wanted a simple blog with posts using GitHub Pages, using `hugo` or `jekyll` would generally be a better choice. But I wanted more than a simple blog—I wanted to deploy web-based tools I built myself, support multilingual posts, custom components, and various other features. Considering that, building it myself was a better fit. Plus, isn’t that more fun?\n\n#### Why SvelteKit?\n\nIf you want to build a static site generation (SSG) based blog using a frontend framework, frameworks like Astro or Next.js are also great choices. Especially Next.js, which has a large ecosystem, tons of resources, and is widely used in enterprises, might be a more **\"safe\"** choice.\n\nBut a blog is a personal project, not a product demanded by a company, which means the number of features or performance metrics aren’t priorities.\n> ~~It’s just personal preference. Please respect that.~~\n\nA deep introduction to SvelteKit isn’t the purpose of this post, so I’ll save that for another time. Instead, let me wrap up by sharing four reasons why I like Svelte/Kit:\n\n- Small and lightweight bundles\n- Relatively simple, close to plain JS\n- Clearer separation of view and logic\n- **Low barrier to entry** and concise syntax\n\nIf you haven’t tried [Svelte](https://svelte.dev/) / [Svelte Kit](https://svelte.dev/docs/kit/introduction) yet, give it a try—it’s delicious.\n\n### Markdown + Automation\n![[markdown-action.png]]\n\nThis blog is written in **Markdown format**. And we have a fantastic Markdown-based note app called [Obsidian](https://obsidian.md/) (which is even free). It supports multiple platforms and has a well-established plugin ecosystem. What I love most is that **all data is stored locally.**\n\nIn my case, I’ve been subscribing to [Obsidian Sync](https://obsidian.md/sync) for years, so everything syncs automatically across all my devices. Thanks to this, I have an environment where I can **freely write and delete anytime, anywhere.** Using the Obsidian Git plugin and GitHub Actions, the Markdown files saved locally are automatically committed and deployed.\n\nIn other words, just write and save. Nothing else to do.\n\n> Write in Markdown, manage with Obsidian, and auto-deploy with GitHub Actions.\n> **Could it get any lazier than this?**\n\n> That said, this automation isn’t finished yet; I’m still tweaking and refining it.\n>\n> Detailed setup and configuration will be covered later in a follow-up post,\n> **like a light appendix**, so if you’re curious, please visit the blog often.\n\nThrough this process, I was able to satisfy all the blog conditions I initially set out:\n1. **Minimize costs**,\n2. **Ownership and control of data**,\n3. **Customization**,\n4. **Ease of writing**\n\nFunctionally, it’s an ideal setup.\n\n## Nevertheless\nThe subtitle of this post was \"**What Are the Conditions for an Ideal Blog?**\" But looking back, what I really thought about and prepared were closer to _\"the conditions for an ideal tool\"_ rather than an ideal blog itself.\n\nEven with a blog I worked so hard to build, if I don’t write and just leave it abandoned, it will end up just a dusty notepad.\n\nMaking this blog truly my **ideal blog** depends on me."}