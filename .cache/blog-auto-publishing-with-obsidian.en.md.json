{"metadataHash":"c6528956b8862e867d747f70dc2fc3666a2e8f5440363a1d274a79aa0a621d97","contentHash":"8b31d9ca9e27060ffd9782f0fce2bfda49a9a93c2cb8bb5eb22b93d568e361d5","metadata":{"created":"2025-07-28T14:30:00.000Z","updated":"2025-08-08T14:50:00.000Z","published":true,"slug":"blog-auto-publishing-with-obsidian","title":"Automatic Blog Publishing (feat. Obsidian)","subTitle":"Everyone Has a Pretty Good Plan","description":"A fully automated system that publishes your writings to the website automatically once you write and save in Obsidian. An environment built with GitHub Actions and Git synchronization, allowing you to focus solely on writing.","series":"ÎòëÎòëÌïú Î∏îÎ°úÍ∑∏ ÎßåÎì§Í∏∞","categories":["Dev"],"tags":["obsidian","github-actions","automation","workflow","markdown"],"lang":"en","thumbnail":null,"originalLang":"ko"},"content":"## Why Is Publishing a Single Post So Complicated?\n\nIn the [[ÎÇòÎßåÏùò Î∏îÎ°úÍ∑∏Î•º ÎßåÎì§Îã§|Last Post]], I talked about why I created my blog and how I chose the technologies. This time, I want to discuss why publishing even a single post on the blog I built feels so complicated, and how I tried to untangle that process.\n\nThe biggest inconvenience I felt running a static blog based on GitHub Pages was **the publishing process itself**.\n\nSince there‚Äôs no separate database or server environment, there‚Äôs no management page or dedicated editor. As a result, the basic writing flow‚Äîdrafting ‚Üí saving ‚Üí editing ‚Üí publishing‚Äîis not smooth. On top of that, having blog posts and frontend code mixed in the same repository is almost a disaster for me, who easily gets sidetracked. That‚Äôs why **separation of concerns** became urgent.\n\n### Everyone Has a Plausible Plan\n![[get-punched-in-the-face.jpg]]\n\n**The original plan was like this:**\n1. Write posts in Obsidian\n2. A Git plugin automatically syncs to a personal repository\n3. GitHub Actions automatically deploy posts to the blog repository\n\nI was confident this would be a perfect system allowing me to write and deploy posts instantly from smartphone, tablet, or desktop. Just focus on writing in Obsidian, and let the automation magic of GitHub Actions handle the rest... such a beautiful plan.\n\nAlthough it worked perfectly in my head, in reality, many unexpected obstacles lurked.\n\n> Everyone has a plausible plan ‚Äî until they get punched in the face.\n\n## Exploring Solutions\n\n### First Plan\n\n\n```mermaid\nsequenceDiagram\nautonumber\nparticipant Developer as üë®‚Äçüíª Author\nparticipant Obsidian as ü™® Obsidian\nparticipant VaultRepo as üìÅ Vault Repository\nparticipant BlogRepo as üìÅ Blog Repository\nparticipant Pages as üåê GitHub Pages\nDeveloper ->> Obsidian: Write blog post\nObsidian ->> VaultRepo: Sync commit\nNote over VaultRepo: Run commit action to filter blog posts\nVaultRepo ->> BlogRepo: Commit blog posts\nNote over BlogRepo: Build & deploy\nBlogRepo ->> Pages: Deploy static site\nNote over Developer: Modify CSS locally, commit\nDeveloper ->> BlogRepo: üí• Attempt to push commit (commit B)\nrect rgb(250,200,200)\nBlogRepo -->> Developer: ‚ùå REJECTED! remote changes exist <br/> Need to pull before commit ‚Üí possible conflicts (mix of auto and manual commits)\nend\n```\n\nThe biggest concern was **the entanglement of automatic commits and manual commits in the same repository**.  \nWhat happens if GitHub Actions commits and deploys posts automatically while I‚Äôm editing CSS or layout locally?\n\nMost likely, when I try to push, the remote repository already contains commits created by automation. In that case, `git push` will be rejected, and I‚Äôll have to go through the tedious process of `git reset HEAD^ & git pull` to resolve conflicts.\n\nBecause of automation made to publish posts, I almost became a **full-time conflict manager**.\n\n### Second Plan\nThe root cause was that the automation process directly committed blog posts to the main branch.\n\nSo, what if **posts were fetched dynamically at build time?**\n```mermaid\nsequenceDiagram\nautonumber\nparticipant Developer as üë®‚Äçüíª Author\nparticipant Obsidian as ü™® Obsidian\nparticipant VaultRepo as üìÅ Vault Repository\nparticipant BlogRepo as üìÅ Blog Repository\nparticipant Pages as üåê GitHub Pages\n\nDeveloper ->> Obsidian: Write blog post\nObsidian ->> VaultRepo: Sync commit\nNote over VaultRepo: Save posts\n\nDeveloper ->> BlogRepo: Modify CSS/layout\nBlogRepo ->> BlogRepo: Trigger build\n\nrect rgb(200,250,200)\nNote over BlogRepo: Build process starts\nBlogRepo ->> VaultRepo: Fetch post data (checkout)\nVaultRepo -->> BlogRepo: Markdown files\nNote over BlogRepo: Preprocessing & site build\nend\n\nBlogRepo ->> Pages: Deploy static site\n```\n\n\nThis way, **the post repository and blog code repository are completely separated**. Each commits independently in their own domain and only meet at build time. Conflicts? That structure makes them impossible.\n\nHowever, this structure had a fatal flaw: **a public repository had to fetch data from a private repository**. This was a reverse access pattern violating common security principles.\n\nMy Obsidian Vault is not just a simple blog repository. It‚Äôs my personal digital brain containing private diaries, work notes, project ideas, and sometimes sensitive information. Having a public blog access this personal repository felt unsettling.\n\n- Risk of exposing sensitive info in public repository‚Äôs Actions logs\n- Security risk of entire Vault exposure if token is compromised\n- Risk of accidentally including private files in the build process\n\nAbove all, because I don‚Äôt trust myself enough, this plan was discarded.\n\n### Final Plan \n~~Revision-v3-v3final-final-final.doc~~\n\n![[Neon-Genesis-Evangeliongendo-Ikari-Gendo.jpg]]\n> Post publishing system ~~humanity~~ enhancement plan final version\n\nAfter much head-scratching, I found my own answer. What if I commit automatically to the blog repository as originally planned, but use a separate branch?\n\n```mermaid\nflowchart TB\n subgraph subGraph0[\"Private Vault Repo\"]\n direction TB\n A[\"Obsidian Notes\"]\n B[\"GitHub Actions\"]\n C[\"Preprocessing & Translation\"]\n end\n subgraph subGraph1[\"Public Blog Repo\"]\n direction TB\n D[\"auto-sync branch\"]\n E[\"master branch\"]\n F[\"GitHub Actions\"]\n end\n subgraph subGraph3[\"User\"]\n direction TB\n H[\"Modify blog design\"]\n I[\"Commit\"]\n J[\"Push\"]\n end\n A --- B\n B --> C\n C --commit--> D\n D -. checkout .-> B\n D -. checkout .-> F\n E -. checkout .-> F\n F --> G[\"GitHub Pages\"]\n H --- I --> J --> E\n style A fill:#f9f\n style D fill:#9f9\n style F fill:#bbf\n```\nIn this structure:\n- Vault‚Äôs GitHub Actions processes posts and pushes to the blog repository‚Äôs `auto-sync` branch\n- The blog‚Äôs build process checks out and merges both `master` and `auto-sync` branches before building\n- Design or code changes are committed directly to the `master` branch as usual\n\nThis completely eliminates the possibility of conflicts while securely connecting the two repositories.\n\n## Actual Implementation\n\nDevelopers speak with code, don‚Äôt they? Below is the GitHub Actions file that realizes the above plan.\n\n**Obsidian Vault (Private Repository)**\n\n```yaml\nname: Contents Sync\n# This workflow syncs contents between the main branch and the blog branch.\non:\n  workflow_dispatch:\n  push:\n    # To prevent unnecessary workflow re-runs, only run when specific files change\n    paths:\n      - \"2.Areas/Blog/*.md\"\n      - \".github/workflows/**\"\n    branches:\n      - main\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout brain repository (current repository)\n      - name: Checkout brain repository\n        uses: actions/checkout@v4\n        with:\n          path: brain\n      # Checkout auto-sync branch of ironpark.github.io\n      - name: Checkout contents repository\n        uses: actions/checkout@v4\n        with:\n          repository: ironpark/ironpark.github.io\n          ref: auto-sync\n          path: contents\n          token: ${{ secrets.GH_TOKEN }}\n      # Install pnpm & cache settings for auto-sync branch of ironpark.github.io\n      - uses: pnpm/action-setup@v4\n        name: Install pnpm\n        with:\n          version: 10.12.4\n          run_install: false\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: \"pnpm\"\n          cache-dependency-path: contents/pnpm-lock.yaml\n      - name: Install dependencies\n        working-directory: contents\n        run: pnpm install --frozen-lockfile\n      # Copy all assets and posts from brain to contents (auto-sync branch)\n      - name: Sync Contents\n        run: |\n          rm -rf contents/{posts,assets,output}\n          mkdir -p contents/{posts,assets}\n          cp -r brain/2.Areas/Blog/*.md contents/posts/\n          cp -r brain/Z.Assets/* contents/assets/\n      - name: Build Contents\n        working-directory: contents\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: |\n          pnpm build\n      # Check for changes in contents and push if there are any changes\n      - name: Check for changes\n        id: check_changes\n        working-directory: contents\n        run: |\n          git add .\n          if git diff --staged --quiet; then\n            echo \"changes=false\" >> $GITHUB_OUTPUT\n          else\n            echo \"changes=true\" >> $GITHUB_OUTPUT\n          fi\n      # Push Contents if there are any changes\n      - name: Push Contents\n        if: steps.check_changes.outputs.changes == 'true'\n        working-directory: contents\n        run: |\n          git config --global user.email \"auto-sync-action@github.com\"\n          git config --global user.name \"auto-sync-action\"\n          git commit -m \"sync contents from $(date +'%Y-%m-%d')\"\n          git push origin auto-sync\n      - name: Run Publish\n        run: gh api /repos/ironpark/ironpark.github.io/dispatches -f event_type='post-sync'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n```\n\n**Blog (Frontend) [Repository](https://github.com/ironpark/ironpark.github.io)**\n\n```yaml\nname: Build and Deploy to Pages\n\non:\n  push:\n    branches: [\"master\"]\n  workflow_dispatch:\n  repository_dispatch:\n    types: [ post-sync ]\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\njobs:\n  build:\n    env:\n      GITHUB_TOKEN: ${{ github.token }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/checkout@v4\n        with:\n          path: ./sync\n          ref: auto-sync\n      - uses: actions/configure-pages@v5\n        id: pages\n      - uses: pnpm/action-setup@v4\n        name: Install pnpm\n        with:\n          version: 10.12.4\n          run_install: false\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'pnpm'\n      - name: Copy posts\n        run: |\n          rm -rf ./src/content/blog ; mkdir -p ./src/content/blog\n          rm -rf ./static/posts ; mkdir -p ./static/posts\n          cp -r ./sync/output/posts/*.md ./src/content/blog\n          cp -r ./sync/output/static/posts/* ./static/posts\n      - name: Install dependencies\n        run: pnpm install --frozen-lockfile\n      - name: Build\n        run: pnpm run build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./build\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - uses: actions/deploy-pages@v4\n        id: deployment\n```\n\n### A Closer Look\n\nDevelopers may speak with code, but just dropping code and disappearing feels too cold. For anyone who might want to try this, I‚Äôll dissect how these two GitHub Actions workflows work together organically.\n\nThough it looks complicated at first glance, each has a clear role, so read carefully.\n\n#### Vault Repository Workflow Analysis\n\nFirst, the `Contents Sync` workflow in the Obsidian Vault repository.\n\n**Trigger Conditions**\n```yaml\non:\n  workflow_dispatch:            # Can be run manually\n  push:\n    paths:\n      - \"2.Areas/Blog/*.md\"     # Only when blog posts change\n      - \".github/workflows/**\"  # Or workflow files change\n    branches:\n      - main\n```\n\nUsing the `paths` filter, it runs **only when blog-related files change**. This prevents unnecessary builds and saves GitHub Actions free tier minutes (2,000 minutes/month). Also, don‚Äôt forget to set `.gitignore` properly to avoid committing unnecessary files.\n\n**Checkout Both Repositories**\n```yaml\n- name: Checkout brain repository\n  uses: actions/checkout@v4\n  with:\n    path: brain     # Check out current repository (vault) into brain folder\n    \n- name: Checkout contents repository\n  uses: actions/checkout@v4\n  with:\n    repository: ironpark/ironpark.github.io # From blog‚Äôs GitHub repository\n    ref: auto-sync  # auto-sync branch\n    path: contents  # into contents folder\n    token: ${{ secrets.GH_TOKEN }}  # Token for external repo access\n```\n\nThis workflow checks out **two repositories into different paths**. This allows simple `cp` commands to move files, enabling easy synchronization without complex scripts. The token is set for later commit and push operations.\n\n**Post Preprocessing**\n```yaml\n- name: Sync Contents  # Remove old files, create directories, copy markdown posts & images\n  run: |\n    rm -rf contents/{posts,assets,output}\n    mkdir -p contents/{posts,assets}\n    cp -r brain/2.Areas/Blog/*.md contents/posts/\n    cp -r brain/Z.Assets/* contents/assets/\n\n- name: Build Contents # Run preprocessing (convert Obsidian syntax, translation, etc.)\n  working-directory: contents\n  run: |\n    pnpm build\n```\n\nFirst, markdown files and images are copied from Vault to the blog repository‚Äôs `auto-sync` branch. Then, `pnpm build` runs the preprocessor in the blog repo.\n\nThis preprocessor performs tasks like:\n- Converting Obsidian‚Äôs `![[image.png]]` syntax to standard markdown\n- AI translation (multilingual support)\n- Other preprocessing tasks\n\nThis preprocessor plays a key role in building this blog but I‚Äôll skip the details for now.\n\n**Check for Changes and Conditional Push**\n```yaml\n- name: Check for changes\n  id: check_changes\n  run: |\n    git add .\n    if git diff --staged --quiet; then\n      echo \"changes=false\" >> $GITHUB_OUTPUT\n    else\n      echo \"changes=true\" >> $GITHUB_OUTPUT\n    fi\n\n- name: Push Contents\n  if: steps.check_changes.outputs.changes == 'true'  # Only if there are changes\n```\n\nAfter preprocessing, it commits only if there are actual changes. This prevents unnecessary commits and deployments if the content hasn‚Äôt changed.\n\n**Trigger Blog Build**\n```yaml\n- name: Run Publish\n  run: gh api /repos/ironpark/ironpark.github.io/dispatches -f event_type='post-sync'\n```\n\nUsing GitHub CLI, it triggers a `repository_dispatch` event on the blog repository. This is the key link connecting the two workflows. The `event_type` acts like a label to distinguish why the trigger happened.\n\n#### Blog Repository Workflow Analysis\n\nNow, let‚Äôs look at the blog repository‚Äôs `Build and Deploy to Pages` workflow.\n\n**Supports Multiple Triggers**\n```yaml\non:\n  push:\n    branches: [\"master\"]  # On code changes\n  workflow_dispatch:      # Manual run\n  repository_dispatch:    \n    types: [ post-sync ]  # Event from Vault\n```\n\nThree triggers are declared, with `repository_dispatch` being the crucial link to the Vault repository. The Vault workflow uses this to trigger the blog deployment workflow.\n\n**Merging Two Branches**\n```yaml\n- uses: actions/checkout@v4  # Checkout master branch\n- uses: actions/checkout@v4\n  with:\n    path: ./sync\n    ref: auto-sync  # Checkout auto-sync branch into sync folder\n    \n- name: Copy posts\n  run: |\n    rm -rf ./src/content/blog ; mkdir -p ./src/content/blog\n    rm -rf ./static/posts ; mkdir -p ./static/posts\n    cp -r ./sync/output/posts/*.md ./src/content/blog  # Copy preprocessed posts\n    cp -r ./sync/output/static/posts/* ./static/posts  # Static files like images\n```\n\nIt merges the code from the `master` branch and the content from the `auto-sync` branch before building. This achieves perfect separation of code and content.\n\n#### Security Considerations\n\nBoth workflows use `${{ secrets.GH_TOKEN }}`. This token:\n- Has read/write permissions only on the blog repo\n- Is a fine-grained PAT with minimal permissions\n\nThis minimizes damage even if the token is accidentally exposed.\n\n#### Why So Complicated?\n\nYou might wonder, ‚ÄúWhy make publishing a single post so complicated?‚Äù But the benefits gained are far from trivial.\n\n1. **Perfect separation of concerns**: Writing and coding don‚Äôt interfere with each other\n2. **Conflict-free collaboration**: Automation and manual work coexist peacefully\n3. **Extensibility**: Easy to add features like preprocessors, translation, cross-posting\n4. **Security**: Clear separation between personal Vault and blog content\n\nIn the end, this seemingly complex system started from a simple desire: **to focus solely on writing**. Sometimes, achieving a simple goal requires a complicated journey.\n\n## What‚Äôs Not Covered\n\nPosts written in Obsidian basically follow markdown format, but applying them directly to the blog was difficult. So I had to create a separate preprocessor and faced various issues in the process. I didn‚Äôt cover these here but plan to write about them separately when I get a chance.\n\n1. **Obsidian Syntax**  \n    Obsidian uses its own markdown extensions. For example, image embeds like `![[image.png]]` or wikilinks like `[[another note]]` don‚Äôt render properly in standard markdown renderers. So a conversion preprocessing step was essential.\n    \n2. **Image Paths and Asset Management**  \n    Images in the Obsidian Vault are usually stored alongside notes, but on the web, unified paths like `/assets/images/` are common. At build time, images need to be copied to the correct location and paths adjusted.\n    \n3. **Mermaid Diagram Support**  \n    This post uses mermaid.js for diagrams. But rendering them properly in a static site build requires special handling to support dynamic rendering.\n    \n4. **Multilingual Support and AI Translation**  \n    I wanted the blog in Korean, English, and Japanese. Writing all three manually is hard, and my foreign language skills are limited, so I introduced AI translation. However, markdown syntax sometimes broke during translation, requiring multiple prompt revisions.\n\n## Future Plans\n\nCurrently, post publishing is managed by the `published` metadata, but I plan to build a scheduled publishing system to ‚Äúquietly post on a set date.‚Äù\n\nAlso, I‚Äôm considering automatic cross-posting to platforms like Velog and Medium after some time, or posting summaries and links to Twitter (X), LinkedIn, and other SNS simultaneously with publishing. When these will be implemented remains uncertain.\n\n> üí° **If you want to know more**\n> \n> All code except the private Vault repository is already available on the [GitHub repository](https://github.com/ironpark/ironpark.github.io). If you‚Äôre curious about the preprocessor implementation, check out the `auto-sync` branch."}