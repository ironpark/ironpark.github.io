{"metadataHash":"c6528956b8862e867d747f70dc2fc3666a2e8f5440363a1d274a79aa0a621d97","contentHash":"9b3a90c4279ffaabff03308e95c899378c1deed851810eeb70af1357efd88fea","metadata":{"created":"2025-07-28T14:30:00.000Z","updated":"2025-08-08T14:50:00.000Z","published":true,"slug":"blog-auto-publishing-with-obsidian","title":"Automatic Blog Publishing (feat. Obsidian)","subTitle":"Everyone Has a Plausible Plan","description":"A fully automated system that automatically publishes your writing to the website just by writing and saving in Obsidian. An environment built with GitHub Actions and Git synchronization, allowing you to focus solely on writing.","series":"ÎòëÎòëÌïú Î∏îÎ°úÍ∑∏ ÎßåÎì§Í∏∞","categories":["Dev"],"tags":["obsidian","github-actions","automation","workflow","markdown"],"lang":"en","thumbnail":null,"originalLang":"ko"},"content":"## Why Is Publishing a Single Post So Complicated?\n\nIn the [[ÎÇòÎßåÏùò Î∏îÎ°úÍ∑∏Î•º ÎßåÎì§Îã§|Last Post]], I talked about the reasons for creating my own blog and the rationale behind the technology choices. This time, I want to discuss why publishing even a single post on the blog I built is so complicated, and how I tried to untangle that process.\n\nThe biggest inconvenience I felt while running a static blog based on GitHub Pages was **the publishing process itself**.\n\nSince there‚Äôs no separate database or server environment, there‚Äôs no management page or dedicated editor. As a result, the basic writing flow‚Äîdrafting ‚Üí saving ‚Üí editing ‚Üí publishing‚Äîis not smooth. On top of that, having blog posts and frontend code mixed in one repository is almost a disaster for me, who easily gets sidetracked. That‚Äôs why **separation of concerns** was desperately needed.\n\n### Everyone Has a Plausible Plan\n![[get-punched-in-the-face.jpg]]\n\n**The initial plan was like this:**\n1. Write posts in Obsidian\n2. A Git plugin automatically syncs to the personal repository\n3. GitHub Actions automatically deploy posts to the blog repository\n\nI was confident this would be a perfect system allowing me to write and immediately deploy posts from my smartphone, tablet, or desktop. I could focus solely on writing in Obsidian, and the rest would be handled automatically by the magic of GitHub Actions... It was such a beautiful plan...\n\nThough it worked perfectly in my head, in reality, there were more hidden pitfalls than I expected.\n\n> Everyone has a plausible plan  ~~until they get punched in the face~~\n\n## Exploring Solutions\n\n### First Plan\n\n```mermaid\nsequenceDiagram\nautonumber\nparticipant Developer as üë®‚Äçüíª Author\nparticipant Obsidian as ü™® Obsidian\nparticipant VaultRepo as üìÅ Vault Repository\nparticipant BlogRepo as üìÅ Blog Repository\nparticipant Pages as üåê GitHub Pages\nDeveloper ->> Obsidian: Write blog post\nObsidian ->> VaultRepo: Sync commit\nNote over VaultRepo: Run blog post filtering commit action\nVaultRepo ->> BlogRepo: Commit blog post\nNote over BlogRepo: Build & deploy\nBlogRepo ->> Pages: Deploy static site\nNote over Developer: Edit CSS locally, commit\nDeveloper ->> BlogRepo: üí• Attempt commit push (commit B)\nrect rgb(250,200,200)\nBlogRepo -->> Developer: ‚ùå REJECTED! remote changes exist <br/> Need to pull before commit ‚Üí possible conflicts (mix of automatic and manual commits)\nend\n```\n\nThe biggest concern was **the situation where automatic commits and manual commits get tangled in the same repository**.  \nWhat happens if GitHub Actions automatically commits and deploys posts while I‚Äôm editing CSS or layout locally?\n\nMost likely, the moment I try to push, the remote repository already has commits created by automation. In that case, `git push` will be rejected, and I‚Äôll have to go through the tedious process of `git reset HEAD^ & git pull` to resolve conflicts.\n\nBecause of the automation made to publish posts, I almost became a **full-time conflict manager**.\n\n### Second Plan\nThe root cause of the problem was that the automation process commits blog posts directly to the main branch.\n\nSo, what if **posts are fetched dynamically at build time?**\n\n```mermaid\nsequenceDiagram\nautonumber\nparticipant Developer as üë®‚Äçüíª Author\nparticipant Obsidian as ü™® Obsidian\nparticipant VaultRepo as üìÅ Vault Repository\nparticipant BlogRepo as üìÅ Blog Repository\nparticipant Pages as üåê GitHub Pages\n\nDeveloper ->> Obsidian: Write blog post\nObsidian ->> VaultRepo: Sync commit\nNote over VaultRepo: Save post\n\nDeveloper ->> BlogRepo: Edit CSS/layout\nBlogRepo ->> BlogRepo: Trigger build\n\nrect rgb(200,250,200)\nNote over BlogRepo: Build process starts\nBlogRepo ->> VaultRepo: Fetch post data (checkout)\nVaultRepo -->> BlogRepo: Markdown files\nNote over BlogRepo: Preprocessing & site build\nend\n\nBlogRepo ->> Pages: Deploy static site\n```\n\nThis way, **the post repository and the blog code repository are completely separated**. Each commits independently in their own domain and only meet at build time. Conflicts? That kind of problem simply can‚Äôt happen.\n\nHowever, this structure had a fatal flaw. **The public repository had to fetch data from the private repository.** This was a reverse access that violates common security principles.\n\nMy Obsidian Vault is not just a simple blog repository. It‚Äôs my personal digital brain containing private diaries, work notes, project ideas, and sometimes sensitive information. The idea that a public blog would access such a personal repository made me uneasy.\n\n- Sensitive information might be exposed in the public repository‚Äôs Actions logs\n- If tokens are stolen, the entire Vault could be compromised\n- Risk of accidentally including private files in the build process\n\nAbove all, because I don‚Äôt trust myself, this plan was discarded.\n\n### The Final?\n\n![[Neon-Genesis-Evangeliongendo-Ikari-Gendo.jpg]]\n> Post publishing system ~~Humanity~~ Enhancement plan final version\n\nSo I changed my approach. **What if I commit automatically to the blog repository as originally planned, but use a separate branch?**\n\n```mermaid\nflowchart TB\n subgraph subGraph0[\"Private Vault Repo\"]\n direction TB\n A[\"Obsidian Notes\"]\n B[\"GitHub Actions\"]\n C[\"Preprocessing & Translation\"]\n end\n subgraph subGraph1[\"Public Blog Repo\"]\n direction TB\n D[\"auto-sync branch\"]\n E[\"master branch\"]\n F[\"GitHub Actions\"]\n end\n subgraph subGraph3[\"User\"]\n direction TB\n H[\"Blog design edits\"]\n I[\"Commit\"]\n J[\"Push\"]\n end\n A --- B\n B --> C\n C --commit--> D\n D -. checkout .-> B\n D -. checkout .-> F\n E -. checkout .-> F\n F --> G[\"GitHub Pages\"]\n H --- I --> J --> E\n style A fill:#f9f\n style D fill:#9f9\n style F fill:#bbf\n```\n\nIn this structure:\n- GitHub Actions in the Vault process posts and push them to the blog repository‚Äôs `auto-sync` branch\n- The blog‚Äôs build process checks out and merges both `master` and `auto-sync` branches before building\n- Design or code edits are committed directly to the `master` branch as usual\n\nThis structure completely eliminates the possibility of conflicts while securely linking the two repositories without security issues.\n\n## Things Not Covered in This Post\n\nPosts written in Obsidian basically follow Markdown format, but applying them directly to the blog was difficult. So I had to create a separate preprocessor, and encountered various issues during that process. I didn‚Äôt cover those here, but I plan to organize and share them separately when I get the chance.\n\n1. **Obsidian Syntax**  \n    Obsidian uses its own Markdown extension syntax. For example, image embeds like `![[image.png]]` or wikilinks like `[[another note]]` don‚Äôt render properly in a standard Markdown renderer. So a preprocessing step to convert these was essential.\n    \n2. **Image Paths and Asset Management**  \n    Obsidian Vault‚Äôs image files are usually stored in the same folder as notes, but on the web, unified paths like `/assets/images/` are generally used. At build time, images had to be copied to the correct location and paths adjusted.\n    \n3. **Mermaid Diagram Support**  \n    This post used mermaid.js for diagrams. However, to render these properly in a static site build, a separate handling method supporting dynamic rendering was needed.\n    \n4. **Multilingual Support and AI Translation**  \n    I wanted to offer the blog in Korean, English, and Japanese. Writing in all three languages every time was difficult, and my foreign language skills are limited, so I introduced AI translation. However, the Markdown syntax sometimes got distorted or broken during translation, requiring multiple prompt adjustments.\n\n## Implementation\n\n### Obsidian Vault Repository\n\n```yaml\nname: Contents Sync\n# This workflow syncs contents between the main branch and the blog branch.\non:\n  workflow_dispatch:\n  push:\n    # Run only when specific files change to avoid unnecessary workflow reruns\n    paths:\n      - \"2.Areas/Blog/*.md\"\n      - \".github/workflows/**\"\n    branches:\n      - main\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get current date\n        id: date\n        run: echo \"::set-output name=date::$(date +'%Y-%m-%d')\"\n      # Checkout brain repository (current repository)\n      - name: Checkout brain repository\n        uses: actions/checkout@v4\n        with:\n          path: brain\n      # Checkout auto-sync branch of ironpark.github.io\n      - name: Checkout contents repository\n        uses: actions/checkout@v4\n        with:\n          repository: ironpark/ironpark.github.io\n          ref: auto-sync\n          path: contents\n          token: ${{ secrets.GH_TOKEN }}\n      # Install pnpm & cache settings for auto-sync branch of ironpark.github.io\n      - uses: pnpm/action-setup@v4\n        name: Install pnpm\n        with:\n          version: 10.12.4\n          run_install: false\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: \"pnpm\"\n          cache-dependency-path: contents/pnpm-lock.yaml\n      - name: Install dependencies\n        working-directory: contents\n        run: pnpm install --frozen-lockfile\n      # Copy all assets and posts from brain to contents (auto-sync branch)\n      - name: Sync Contents\n        run: |\n          rm -rf contents/{posts,assets,output}\n          mkdir -p contents/{posts,assets}\n          cp -r brain/2.Areas/Blog/*.md contents/posts/\n          cp -r brain/Z.Assets/* contents/assets/\n      - name: Build Contents\n        working-directory: contents\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: |\n          pnpm build\n      # Check for changes in contents and push if there are any changes\n      - name: Check for changes\n        id: check_changes\n        working-directory: contents\n        run: |\n          git add .\n          if git diff --staged --quiet; then\n            echo \"::set-output name=changes::false\"\n          else\n            echo \"::set-output name=changes::true\"\n          fi\n      # Push Contents if there are any changes\n      - name: Push Contents\n        if: steps.check_changes.outputs.changes == 'true'\n        working-directory: contents\n        run: |\n          git config --global user.email \"auto-sync-action@github.com\"\n          git config --global user.name \"auto-sync-action\"\n          git commit -m \"sync contents from ${{ steps.date.outputs.date }}\"\n          git push origin auto-sync\n      - name: Run Publish\n        run: gh api /repos/ironpark/ironpark.github.io/dispatches -f event_type='post-sync'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n```\n\n### Blog (Frontend) Repository\n\n```yaml\nname: Build and Deploy to Pages\n\non:\n  push:\n    branches: [\"master\"]\n  workflow_dispatch:\n  repository_dispatch:\n    types: [ post-sync ]\n\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\njobs:\n  build:\n    env:\n      GITHUB_TOKEN: ${{ github.token }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/checkout@v4\n        with:\n          path: ./sync\n          ref: auto-sync\n      - uses: actions/configure-pages@v5\n        id: pages\n      - uses: pnpm/action-setup@v4\n        name: Install pnpm\n        with:\n          version: 10.12.4\n          run_install: false\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'pnpm'\n      - name: Copy posts\n        run: |\n          rm -rf ./src/content/blog ; mkdir -p ./src/content/blog\n          rm -rf ./static/posts ; mkdir -p ./static/posts\n          cp -r ./sync/output/posts/*.md ./src/content/blog\n          cp -r ./sync/output/static/posts/* ./static/posts\n      - name: Install dependencies\n        run: pnpm install --frozen-lockfile\n      - name: Build\n        run: pnpm run build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./build\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - uses: actions/deploy-pages@v4\n        id: deployment\n```\n\n## Future Plans\n\nCurrently, post publication status is managed by the `published` metadata, but in the future, I plan to build a scheduled publishing system to quietly post articles on predetermined dates.\n\nBesides that, I‚Äôm also considering features like automatically cross-posting to other platforms like Velog or Medium after a certain time, or posting summaries and links to social media like Twitter (X) and LinkedIn simultaneously with publication. However, when these will be implemented is still uncertain...\n\n> It‚Äôs still at the idea stage, but my goal is to push GitHub Actions to the limits of the free tier. (At this point, it feels less like the machine is being worked hard and more like I am.)\n\n---\n\n> üí° **If you‚Äôre curious about this automation system**\n> \n> The full code is available in the [GitHub repository](https://github.com/ironpark/ironpark.github.io).  \n> Especially check out the action files in the `.github/workflows/` folder for detailed implementation.\n>\n> If you want to build a similar system, feel free to ask questions anytime. Let‚Äôs create a better writing environment together."}